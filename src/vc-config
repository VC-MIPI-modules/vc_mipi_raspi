#!/bin/bash

# Find all media devices and check for video0


map_mediabus_to_fourcc() {
    local mediabus_code=$1
    local mediabusfmt=""
    case $mediabus_code in
        "0x3001")
            mediabusfmt="BA81" #MEDIA_BUS_FMT_SBGGR8_1X8
            ;;
        "0x3002")
            mediabusfmt="GRBG" #MEDIA_BUS_FMT_SGRBG8_1X8
            ;;
        "0x3013")
            mediabusfmt="GBRG" #MEDIA_BUS_FMT_SGBRG8_1X8
            ;;
        "0x3014")
            mediabusfmt="RGGB" #MEDIA_BUS_FMT_SRGGB8_1X8
            ;;
        "0x2001")
            mediabusfmt="GREY" #MEDIA_BUS_FMT_Y8_1X8
            ;;
        "0x300e")
            mediabusfmt="pGAA" #MEDIA_BUS_FMT_SGBRG10_1X10
            ;;
        "0x300f")
            mediabusfmt="pRAA" #MEDIA_BUS_FMT_SRGGB10_1X10
            ;;
        "0x200a")
            mediabusfmt="Y10 " #MEDIA_BUS_FMT_Y10_1X10
            ;;
        "0x300a")
            mediabusfmt="pgAA" #MEDIA_BUS_FMT_SGRBG10_1X10
            ;;
        "0x3007") 
            mediabusfmt="pBAA" #MEDIA_BUS_FMT_SBGGR10_1X10
            ;;
        "0x3008")
            mediabusfmt="pBCC" #MEDIA_BUS_FMT_SBGGR12_1X12
            ;;
        "0x3010")
            mediabusfmt="pGCC" #MEDIA_BUS_FMT_SGBRG12_1X12 
            ;;
        "0x3011")
            mediabusfmt="pgCC" #MEDIA_BUS_FMT_SGRBG12_1X12
            ;;
        "0x3012")
            mediabusfmt="pRCC" #MEDIA_BUS_FMT_SRGGB12_1X12
            ;;
        "0x2013")
            mediabusfmt="Y12P" #MEDIA_BUS_FMT_Y12_1X12
            ;;       
        "0x3019")
            mediabusfmt="pBEE" #MEDIA_BUS_FMT_SBGGR14_1X14
            ;;
        "0x301a")
            mediabusfmt="pGEE" #MEDIA_BUS_FMT_SGBRG14_1X14
            ;;
        "0x301b")
            mediabusfmt="pgEE" #MEDIA_BUS_FMT_SGRBG14_1X14
            ;;
        "0x301c")
            mediabusfmt="pREE" #MEDIA_BUS_FMT_SRGGB14_1X14
            ;;
        "0x202d")
            mediabusfmt="Y14P" #MEDIA_BUS_FMT_Y14_1X14
            ;;	
        "0x301d")
            mediabusfmt="BYR2" #MEDIA_BUS_FMT_SBGGR16_1X16
            ;;
        "0x301e")
            mediabusfmt="GB16" #MEDIA_BUS_FMT_SGBRG16_1X16
            ;;
        "0x301f")
            mediabusfmt="GR16" #MEDIA_BUS_FMT_SGRBG16_1X16
            ;;
        "0x3020")
            mediabusfmt="RG16" #MEDIA_BUS_FMT_SRGGB16_1X16
            ;;
        "0x202e")
            mediabusfmt="Y16 " #MEDIA_BUS_FMT_Y16_1X16
            ;;       
       
        
        *)
            echo "Unknown mediabus code: $mediabus_code"
            exit 1
            ;;
    esac
    echo "$mediabusfmt"

}
get_mediabus_code() {
    local subdev=$1

    # Use v4l2-ctl to get the format of the subdevice and extract the mediabus code
    v4l2-ctl --device=$subdev --get-subdev-fmt pad=0 | grep "Mediabus Code" | awk '{print $4}'
}
configure_device_tree() {
    local change=false
        # Use whiptail to create a menu for selecting the camera
    while true; do
        camera=$(whiptail --menu "Select the camera:" 15 80 2 --cancel-button "Save and exit"\
        "cam0" "MIPI CSI Connector 0" \
        "cam1" "MIPI CSI Connector 1" 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            break
        fi 

        config_file="/boot/firmware/config_vc-mipi-driver-bcm2712.txt"

        current_lanes=$(grep "^dtoverlay=vc-mipi-bcm2712-$camera,lanes" "$config_file" | awk -F 'lanes' '{print $2}')
        

        # Use whiptail to create a menu for selecting the number of lanes
        lanes=$(whiptail --menu "Select the number of lanes:" 15 200 3 --default-item "$current_lanes" --cancel-button "Cancel"\
        "1" "1 lane (i.e. OV7251, IMX296, IMX297)" \
        "2" "2 lanes (i.e.  OV9281, IMX264, IMX265, IMX178, IMX183, IMX226, IMX250, IMX252, IMX273, IMX290, IMX327, IMX335, IMX392)" \
        "4" "4 lanes (i.e. IMX178, IMX183, IMX226, IMX250, IMX252, IMX273, IMX290,  IMX327, IMX335, IMX392, IMX412, IMX415, IMX462, IMX565, IMX566, IMX567, IMX568, IMX900)" 3>&1 1>&2 2>&3)
        if [ "$lanes" != "$current_lanes" ]; then
            change=true
            sudo sed -i "s/^dtoverlay=vc-mipi-bcm2712-$camera,lanes[0-9]*/dtoverlay=vc-mipi-bcm2712-$camera,lanes$lanes/" "$config_file"

        fi

    done;
    if [ "$change" = true ]; then   
        whiptail --msgbox "Please reboot system" 8 40 --title "Success" 3>&1 1>&2 2>&3
        sleep 2
    fi
}
set_roi() {

    local subdev=$1
    local videodev=$2
    local width=$3
    local height=$4

    if [ $subdev = "" ]; then
        echo "No subdevice specified"
        return
    fi
    if [ $videodev = "" ]; then
        echo "No video device specified"
        return
    fi

        
    for mediadev in /dev/media*; do
        echo "Checking $mediadev..."
        
        # Skip if not a valid media device
        if ! [ -e "$mediadev" ]; then
            continue
        fi
        
        # Get media device number
        media_num=$(echo "$mediadev" | grep -o '[0-9]*$')
        
        # Check if this media device has video0
        if media-ctl -d "$mediadev" -p | grep -q "$videodev"; then
            echo "Found $videodev on $mediadev"
            
            # Your existing script logic here
        
            media-ctl -d "$mediadev" 

            mediabus_code=$(get_mediabus_code $subdev )

            # Print the mediabus code
            echo "Mediabus code of subdevice $subdev: '$mediabus_code'"
            fmt=$(map_mediabus_to_fourcc $mediabus_code)
            echo "Format of subdevice $subdev: $fmt"

            resolution=$(v4l2-ctl -d $subdev --get-subdev-fmt | grep Width | awk -F ' ' '{ print $3 }' | tr '/' 'x' | xargs echo -n)
          
            mediabusfmt=$(v4l2-ctl -d $subdev --get-subdev-fmt | grep Mediabus | awk -F ' ' '{ print $5 }' | tr -d '()' | cut -c 15- | xargs echo -n)
            format="$mediabusfmt/$resolution"
            #read a
            entity_name=$(media-ctl -d "$mediadev" -p | grep -B 3 "$subdev" | grep entity | awk -F ': ' '{ print $2 }' | awk -F ' ' '{ print $1, $2 }')
            echo media-ctl -d "$mediadev" -p | grep -B 3 "$subdev"
            echo "Code: $fmt"
            media-ctl -d "$mediadev" -l ''\''csi2'\'':4 -> '\''rp1-cfe-csi2_ch0'\'':0 [1]' 
            
            echo "media-ctl -d $mediadev -V \"'$entity_name':0 [fmt:$mediabusfmt/${width}x${height} field:none colorspace:srgb]\"" 
            media-ctl -d $mediadev -V "'$entity_name':0 [fmt:$mediabusfmt/${width}x${height} field:none colorspace:srgb]" 
            v4l2-ctl -d "$videodev" --set-fmt-video=width=$width,height=$height,pixelformat=$fmt,colorspace=srgb 

            #read a
            if v4l2-ctl --verbose  --stream-mmap --device=$videodev --stream-count=3;then
                whiptail --infobox "Successfully set ROI to $width x $height" 8 40 --title "Success"
                sleep 1
            else
                whiptail --infobox "Failed to set ROI to $width x $height" 8 40 --ok-button "OK" --title "Error"  --colors --msgbox "\Zb\Z1Failed to set ROI to $width x $height\Zn" 8 40
                sleep 1
            fi
            return
        fi
    done
}
set_format() {

    local videodev=$1
    local mediabusfmt=$2
        
    for mediadev in /dev/media*; do
        echo "Checking $mediadev..."
        
        # Skip if not a valid media device
        if ! [ -e "$mediadev" ]; then
            continue
        fi
        
        # Get media device number
        media_num=$(echo "$mediadev" | grep -o '[0-9]*$')
        
        # Check if this media device has video0
        if media-ctl -d "$mediadev" -p | grep -q "$videodev"; then
            echo "Found $videodev on $mediadev"
            
            # Your existing script logic here
            subdev=$(media-ctl -d "$mediadev" -p | grep "vc_mipi_camera" -A  2  | grep "device node name" | awk -F ' ' '{ print $4 }')

            media-ctl -d "$mediadev" -r

            mediabus_code=$(get_mediabus_code $subdev )

            # Print the mediabus code
            echo "Mediabus code of subdevice $subdev: '$mediabus_code'"
            fmt=$(map_mediabus_to_fourcc $mediabus_code)
            echo "Format of subdevice $subdev: $fmt"

            entity_name=$(get_entity_name $mediadev)
            echo "Entity name: $entity_name"



            resolution=$(v4l2-ctl -d $subdev --get-subdev-fmt | grep Width | awk -F ' ' '{ print $3 }' | tr '/' 'x' | xargs echo -n)
            width=$(echo $resolution | awk -F 'x' '{ print $1 }')
            height=$(echo $resolution | awk -F 'x' '{ print $2 }')
            format="$mediabusfmt/$resolution"
            #read a
            #
            echo "media-ctl -d "$mediadev" -V ''\''csi2'\'':4 [fmt:'"$format"' field:none colorspace:srgb]'" 
            media-ctl -d "$mediadev" -V ''\''csi2'\'':4 [fmt:'"$format"' field:none colorspace:srgb]' 
            media-ctl -d "$mediadev" -V ''\''csi2'\'':0 [fmt:'"$format"' field:none colorspace:srgb]' 
            media-ctl -d "$mediadev" -V ''\''vc_mipi_camera '$entity_name''\'':0 [fmt:'"$format"' field:none colorspace:srgb]' 

            media-ctl -d "$mediadev" -l ''\''csi2'\'':4 -> '\''rp1-cfe-csi2_ch0'\'':0 [1]' 
            v4l2-ctl -d "$videodev" --set-fmt-video=width=$width,height=$height,pixelformat=$fmt,colorspace=srgb 
            #read a
            v4l2-ctl --verbose  --stream-mmap --device=$videodev --stream-count=3
            s
                                   
           
            return
        fi
    done
}

dialog_set_roi() 
{
    local subdev=$1
    local videodev=$2

    # Use whiptail to prompt the user to enter width and height
    width=$(whiptail --inputbox "Enter the desired width:" 8 40 1024 3>&1 1>&2 2>&3)
    height=$(whiptail --inputbox "Enter the desired height:" 8 40 1024 3>&1 1>&2 2>&3)


    echo "Selected subdevice: $subdev"
    echo "Width: $width, Height: $height, Subdevice: $subdev, Device: $videodev"
    set_roi "$subdev" "$videodev" "$width" "$height"
    
}
dialog_set_format() 
{
    local videodev=$1

    menu_options_format+=("BA81" "SBGGR8_1X8")
    menu_options_format+=("GRBG" "SGRBG8_1X8")
    menu_options_format+=("GBRG" "SGBRG8_1X8")
    menu_options_format+=("RGGB" "SRGGB8_1X8")
    menu_options_format+=("GREY" "Y8_1X8")
    menu_options_format+=("pGAA" "SGBRG10_1X10")
    menu_options_format+=("pRAA" "SRGGB10_1X10")
    menu_options_format+=("Y10P" "Y10_1X10")
    menu_options_format+=("pgAA" "SGRBG10_1X10")
    menu_options_format+=("pBAA" "SBGGR10_1X10")
    menu_options_format+=("pBCC" "SBGGR12_1X12")
    menu_options_format+=("pGCC" "SGBRG12_1X12 ")
    menu_options_format+=("pgCC" "SGRBG12_1X12")
    menu_options_format+=("pRCC" "SRGGB12_1X12")
    menu_options_format+=("Y12P" "Y12_1X12")
    menu_options_format+=("pBEE" "SBGGR14_1X14")
    menu_options_format+=("pGEE" "SGBRG14_1X14")
    menu_options_format+=("pgEE" "SGRBG14_1X14")
    menu_options_format+=("pREE" "SRGGB14_1X14")
    menu_options_format+=("Y14P" "Y14_1X14")
    menu_options_format+=("BYR2" "SBGGR16_1X16")
    menu_options_format+=("GB16" "SGBRG16_1X16")
    menu_options_format+=("GR16" "SGRBG16_1X16")
    menu_options_format+=("RG16" "SRGGB16_1X16")
    menu_options_format+=("Y16 " "Y16_1X16")
    menu_options+=("Set ROI" "Set the region of interest")  
    menu_options+=("Configure Device Tree" "Configure the lanes for the mipi sensors")

   

    # Use whiptail to prompt the user to enter width and height
    mediabusfmt=$(whiptail --menu "Select the sensor" 25 50 16 "${menu_options_format[@]}" 3>&1 1>&2 2>&3)

    echo "Selected format: $mediabusfmt"
    set_format "$videodev" "$mediabusfmt"
    
}

get_entity_name() {
    local mediadev=$1
    local entity_name=$(media-ctl -d "$mediadev" -p | grep "vc_mipi_camera" | awk -F 'vc_mipi_camera' '{print $2}' | awk '{print $1}' | tail -n +2 |head -n 1)
    if [ -z "$entity_name" ]; then
        echo "Error: vc_mipi_camera not found in $mediadev" >&2
        exit 1
    fi
    echo "$entity_name"
}

configure_subdev_controls() {
    local subdev=$1
    local videodev=$2

    # Get all available controls for the subdevice
    controls=$(v4l2-ctl --device=$subdev --list-ctrls | grep -v "flags=read-only" | awk '{print $1}')

    while true; do
        # Create menu options for whiptail
        menu_options=()
        menu_options+=("Set ROI" "Set the region of interest")
        menu_options+=("Configure Device Tree" "Configure the lanes for the mipi sensors")
        menu_options+=("Format" "Set the format of the camera")
        for control in $controls; do
            if ! v4l2-ctl --device=$subdev --get-ctrl=$control;then
                continue
            fi
            current_value=$(v4l2-ctl --device=$subdev --get-ctrl=$control | awk '{print $NF}')
            control_info=$(v4l2-ctl --device=$subdev --list-ctrls | grep "$control")
            if [[ "$current_value" != "denied"* && "$control_info" != *"flags=read-only"* && "$control_info" != *"Controls"* ]]; then
                menu_options+=("$control" "$current_value")
            fi
        done

        # Show the menu with controls
        selected_control=$(whiptail --menu "Select the control to adjust:" 25 80 16 "${menu_options[@]}" 3>&1 1>&2 2>&3)
        # Check if cancel was pressed
        if [ $? -ne 0 ]; then
            exit 0
        fi    
        if([ "$selected_control" == "Set ROI" ]); then
            dialog_set_roi "$subdev" "$videodev"
            continue
        fi
        if([ "$selected_control" == "Configure Device Tree" ]); then
            configure_device_tree
            continue
        fi
        if([ "$selected_control" == "Format" ]); then
            dialog_set_format "$videodev"
            continue
        fi


        # Get the current value of the selected control
        current_value=$(v4l2-ctl --device=$subdev --get-ctrl=$selected_control | awk '{print $NF}')
        
        # Prompt the user to enter a new value for the control
        new_value=$(whiptail --inputbox "Enter the value for $selected_control (current: $current_value):" 8 40 "$current_value" 3>&1 1>&2 2>&3)
        
        # Check if cancel was pressed
        if [ $? -ne 0 ]; then
            continue
        fi
        
        # Set the new value for the control
        if v4l2-ctl --device=$subdev --set-ctrl=$selected_control=$new_value; then
            TERM=ansi whiptail --infobox "Successfully set $selected_control to $new_value" 8 40 --title "Success" 
            sleep 1
        else
            whiptail --infobox "Failed to set $selected_control to $new_value" 8 40 --ok-button "OK" --title "Error"  --colors --msgbox "\Zb\Z1Failed to set $selected_control to $new_value\Zn" 8 40
            sleep 1

        fi
    done
}

declare -A dev_subdev_map

# Scan all media devices and collect subdevice names
subdevices=()
menu_options=()
for mediadev in /dev/media*; do
    if media-ctl -d "$mediadev" -p | grep -q "vc_mipi_camera"; then
        subdev=$(media-ctl -d "$mediadev" -p | grep "vc_mipi_camera" -A  2  | grep "device node name" | awk -F ' ' '{ print $4 }')
        dev=$(media-ctl -d "$mediadev" -p | grep "rp1-cfe-csi2_ch0" -A  2  | grep "device node name" | awk -F ' ' '{ print $4 }')
        dev_subdev_map["$dev"]="$subdev"

        menu_options+=( "$dev" "$subdev" )

    fi
done
if [ ${#menu_options[@]} -eq 0 ]; then
echo "No camera detected"
    whiptail --msgbox "No camera detected \nCheck the setup or the lanes configuration" 8 40 --title "Error" 3>&1 1>&2 2>&3
    configure_device_tree
    sleep 1
    exit 1
fi
# Use whiptail to create a menu with the collected subdevice names
selected_dev=$(whiptail --menu "Select the sensor" 25 50 16 "${menu_options[@]}" 3>&1 1>&2 2>&3)
selected_subdev=${dev_subdev_map["$selected_dev"]}
configure_subdev_controls "$selected_subdev" "$selected_dev"
