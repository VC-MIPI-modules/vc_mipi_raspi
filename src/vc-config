#!/bin/bash

# Find all media devices and check for video0
# Extract the hardware information from /proc/cpuinfo
hardware_info=$(grep -m 1 'Hardware' /proc/cpuinfo | awk '{print $3}')
revision_info=$(grep -m 1 'Revision' /proc/cpuinfo | awk '{print $3}')
model_info=$(grep -m 1 'Model' /proc/cpuinfo | awk -F ': ' '{print $2}')

# Convert the revision code to binary and extract the PPPP part (bits 23 to 20)
revision_bin=$(printf "%032b\n" $((16#$revision_info)))
pppp=$(( ($revision_bin >> 12) & 0xf ))

# Convert the binary PPPP part back to hexadecimal
pppp_hex=$(echo "obase=16; ibase=2; $pppp" | bc)


# Display the hardware information
echo "Hardware: $hardware_info"
echo "Revision: $revision_info"
echo "Model: $model_info"
echo "PPPP: $pppp_hex"

# Determine the Raspberry Pi model based on the revision code
case $pppp_hex in
0) echo "BCM2835";;
1) echo "BCM2836";;
2) echo "BCM2837";;
3) echo "BCM2711";;
4) echo "BCM2712";;
esac


configure_device_tree() {
    local change=false
        # Use whiptail to create a menu for selecting the camera
    while true; do
        camera=$(whiptail --menu "Select the camera:" 15 80 2 --cancel-button "Save and exit"\
        "cam0" "MIPI CSI Connector 0" \
        "cam1" "MIPI CSI Connector 1" 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            break
        fi 

        config_file="/boot/firmware/config_vc-mipi-driver-bcm2711.txt"

        current_lanes=$(grep "^dtparam="$camera"_lanes" "$config_file" | awk -F 'lanes' '{print $2}')
        current_manu=$(grep "^dtparam="$camera"_manu_" "$config_file" | awk -F '_manu_' '{print $2}')

        # Use whiptail to create a menu for selecting the number of lanes
        lanes=$(whiptail --menu "Select the number of lanes:" 15 200 3 --default-item "$current_lanes" --cancel-button "Cancel"\
        "1" "1 lane (i.e. OV7251, IMX296, IMX297)" \
        "2" "2 lanes (i.e.  OV9281, IMX264, IMX265, IMX178, IMX183, IMX226, IMX250, IMX252, IMX273, IMX290, IMX327, IMX335, IMX392)" \
        "4" "4 lanes (i.e. IMX178, IMX183, IMX226, IMX250, IMX252, IMX273, IMX290,  IMX327, IMX335, IMX392, IMX412, IMX415, IMX462, IMX565, IMX566, IMX567, IMX568, IMX900)" 3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            break
        fi 
        if [ "$lanes" != "$current_lanes" ]; then
            change=true
            sudo sed -i "s/^dtparam=${camera}_lanes[0-9]*/dtparam=${camera}_lanes${lanes}/" "$config_file"
        fi
        manufacturer=$(whiptail --menu "Manufacturer:" 15 200 3  --default-item "$current_manu" \
        "sony" "SONY IMX" \
        "ov" "OMNIVISION" \
        3>&1 1>&2 2>&3)
        if [ $? -ne 0 ]; then
            break
        fi 
          if [ "$manufacturer" != "$current_manu" ]; then
            change=true
                sudo sed -i "s/^dtparam=${camera}_manu_.*/dtparam=${camera}_manu_${manufacturer}/" "$config_file"
        fi
    done;
    if [ "$change" = true ]; then   
        whiptail --msgbox "Please reboot system" 8 40 --title "Success" 3>&1 1>&2 2>&3
        sleep 2
    fi
}

set_roi() {

    local subdev=$1
    local videodev=$2
    local width=$3
    local height=$4

    if [ $subdev = "" ]; then
        echo "No subdevice specified"
        return
    fi
    if [ $videodev = "" ]; then
        echo "No video device specified"
        return
    fi
    fmt=$(v4l2-ctl --device=$videodev --all | grep 'Pixel Format' | awk -F ' ' '{ print $4 }' | tr -d "'" )
 

    v4l2-ctl -d "$videodev" --set-fmt-video=width=$width,height=$height,pixelformat=$fmt,colorspace=srgb

        
   
    if v4l2-ctl --verbose  --stream-mmap --device=$videodev --stream-count=3;then
        whiptail --infobox "Successfully set ROI to $width x $height" 8 40 --title "Success"
        sleep 1
    else
        whiptail --infobox "Failed to set ROI to $width x $height" 8 40 --ok-button "OK" --title "Error"
        sleep 1
    fi
    return
        
    
}
set_format() {

    local videodev=$1      
    local fmt=$2    
    resolution=$(v4l2-ctl --device=$videodev --all | grep 'Width/Height' | awk -F ' ' '{ print $3 }' | tr '/' 'x' | xargs echo -n)
    cur_width=$(echo $resolution | awk -F 'x' '{ print $1 }')
    cur_height=$(echo $resolution | awk -F 'x' '{ print $2 }')

    v4l2-ctl -d "$videodev" --set-fmt-video=width=$cur_width,height=$cur_height,pixelformat=$fmt,colorspace=srgb 

    v4l2-ctl --verbose  --stream-mmap --device=$videodev --stream-count=3
    sleep 2        
    
}

dialog_set_roi() 
{
    local subdev=$1
    local videodev=$2
    # Read the current resolution of the videodev

    resolution=$(v4l2-ctl --device=$videodev --all | grep 'Width/Height' | awk -F ' ' '{ print $3 }' | tr '/' 'x' | xargs echo -n)
    cur_width=$(echo $resolution | awk -F 'x' '{ print $1 }')
    cur_height=$(echo $resolution | awk -F 'x' '{ print $2 }')

    # Use whiptail to prompt the user to enter width and height
    width=$(whiptail --inputbox "Enter the desired width:" 8 40 $cur_width 3>&1 1>&2 2>&3)
    height=$(whiptail --inputbox "Enter the desired height:" 8 40 $cur_height 3>&1 1>&2 2>&3)


    echo "Selected subdevice: $subdev"
    echo "Width: $width, Height: $height, Subdevice: $subdev, Device: $videodev"
    set_roi "$subdev" "$videodev" "$width" "$height"
    
}
dialog_set_format() 
{
       local videodev=$1

    declare -A format_map
    format_map=(
        ["BGGR8"]="SBGGR8_1X8"
        ["GRBG8"]="SGRBG8_1X8"
        ["GBRG8"]="SGBRG8_1X8"
        ["RGGB8"]="SRGGB8_1X8"
        ["Y8"]="Y8_1X8"
        ["GBRG10"]="SGBRG10_1X10"
        ["RGGB10"]="SRGGB10_1X10"
        ["Y10P"]="Y10_1X10"
        ["GRBG10"]="SGRBG10_1X10"
        ["BGGR10"]="SBGGR10_1X10"
        ["BGGR12"]="SBGGR12_1X12"
        ["GBRG12"]="SGBRG12_1X12"
        ["GRBG12"]="SGRBG12_1X12"
        ["RGGB12"]="SRGGB12_1X12"
        ["Y12"]="Y12_1X12"
        ["BGGR14"]="SBGGR14_1X14"
        ["GBRG14"]="SGBRG14_1X14"
        ["GRBG14"]="SGRBG14_1X14"
        ["RGGB14"]="SRGGB14_1X14"
        ["Y14"]="Y14_1X14"
        ["BGGR16"]="SBGGR16_1X16"
        ["GB16"]="SGBRG16_1X16"
        ["GR16"]="SGRBG16_1X16"
        ["RG16"]="SRGGB16_1X16"
        ["Y16"]="Y16_1X16"
    )

   
        
    echo "$mediabusfmt"
    menu_options_format=(
        "GREY" "Greyscale 8-bit"
        "Y10P" "Greyscale 10-bit"
        "Y12P" "Greyscale 12-bit"
        "Y14P" "Bayer Y14 14-bit"
        "Y16 " "Greyscale 16-bit"
        "BA81" "Bayer BGGR 8-bit"
        "GRBG" "Bayer GRBG 8-bit"
        "GBRG" "Bayer GBRG 8-bit"
        "RGGB" "Bayer RGGB 8-bit"
        "pGAA" "Bayer GBRG 10-bit"
        "pRAA" "Bayer RGGB 10-bit"
        "pgAA" "Bayer GRBG 10-bit"
        "pBAA" "Bayer BGGR 10-bit"
        "pBCC" "Bayer BGGR 12-bit"
        "pGCC" "Bayer GBRG 12-bit"
        "pgCC" "Bayer GRBG 12-bit"
        "pRCC" "Bayer RGGB 12-bit"
        "pBEE" "Bayer BGGR 14-bit"
        "pGEE" "Bayer GBRG 14-bit"
        "pgEE" "Bayer GRBG 14-bit"
        "pREE" "Bayer RGGB 14-bit"   
        "BYR2" "Bayer BGGR 16-bit"
        "GB16" "Bayer GBRG 16-bit"
        "GR16" "Bayer GRBG 16-bit"
        "RG16" "Bayer RGGB 16-bit"
    )

    # Use whiptail to prompt the user to select the format
    mediabusfmt=$(whiptail --menu "Select the sensor format" 25 50 16 "${menu_options_format[@]}" 3>&1 1>&2 2>&3)

    
    if [ $? -ne 0 ]; then
        return
    fi
    # Lookup the full mediabus format code
    full_mediabusfmt=${format_map[$mediabusfmt]}
    echo "Selected format: $mediabusfmt"
    set_format "$videodev" "$mediabusfmt"
}
 

get_entity_name() {
    local mediadev=$1
    local entity_name=$(media-ctl -d "$mediadev" -p | grep "vc_mipi_camera" | awk -F 'vc_mipi_camera' '{print $2}' | awk '{print $1}' | tail -n +2 |head -n 1)
    if [ -z "$entity_name" ]; then
        echo "Error: vc_mipi_camera not found in $mediadev" >&2
        exit 1
    fi
    echo "$entity_name"
}

configure_subdev_controls() {
    local subdev=$1
    local videodev=$2

    # Get all available controls for the subdevice
    controls=$(v4l2-ctl --device=$subdev --list-ctrls | grep -v "flags=read-only" | grep -v " Controls" | grep -v "(button)" | awk '{print $1}' )

    while true; do
        # Create menu options for whiptail
        menu_options=()
        menu_options+=("Set ROI" "Set the region of interest")
        menu_options+=("Configure Device Tree" "Configure the lanes for the mipi sensors")
        menu_options+=("Format" "Set the format of the camera")
        for control in $controls; do
            if ! v4l2-ctl --device=$subdev --get-ctrl=$control;then
                continue
            fi
            current_value=$(v4l2-ctl --device=$subdev --get-ctrl=$control | awk '{print $NF}')
            control_info=$(v4l2-ctl --device=$subdev --list-ctrls | grep "$control")
            if [[ "$current_value" != "denied"* && "$control_info" != *"Controls"* ]]; then
                menu_options+=("$control" "$current_value")
            fi
        done

        # Show the menu with controls
        selected_control=$(whiptail --menu "Select the control to adjust:" 25 80 16 "${menu_options[@]}" 3>&1 1>&2 2>&3)
        # Check if cancel was pressed
        if [ $? -ne 0 ]; then
            exit 0
        fi    
        if([ "$selected_control" == "Set ROI" ]); then
            dialog_set_roi "$subdev" "$videodev"
            continue
        fi
        if([ "$selected_control" == "Configure Device Tree" ]); then
            configure_device_tree
            continue
        fi
        if([ "$selected_control" == "Format" ]); then
            dialog_set_format "$videodev"
            continue
        fi


        # Get the current value of the selected control
        current_value=$(v4l2-ctl --device=$subdev --get-ctrl=$selected_control | awk '{print $NF}')
        
        # Prompt the user to enter a new value for the control
        new_value=$(whiptail --inputbox "Enter the value for $selected_control (current: $current_value):" 8 40 "$current_value" 3>&1 1>&2 2>&3)
        
        # Check if cancel was pressed
        if [ $? -ne 0 ]; then
            continue
        fi
        
        # Set the new value for the control
        if v4l2-ctl --device=$subdev --set-ctrl=$selected_control=$new_value; then
            TERM=ansi whiptail --infobox "Successfully set $selected_control to $new_value" 8 40 --title "Success" 
            sleep 1
        else
            whiptail --infobox "Failed to set $selected_control to $new_value" 8 40 --ok-button "OK" --title "Error"  
            sleep 1

        fi
    done
}

declare -A dev_subdev_map

# Scan all media devices and collect subdevice names
subdevices=()
menu_options=()
for mediadev in /dev/media*; do
    if media-ctl -d "$mediadev" -p | grep -q "vc_mipi_camera"; then
        subdev=$(media-ctl -d "$mediadev" -p | grep "vc_mipi_camera" -A  2  | grep "device node name" | awk -F ' ' '{ print $4 }')
        dev=$(media-ctl -d "$mediadev" -p | grep " unicam-image" -A  2  | grep "device node name" | awk -F ' ' '{ print $4 }')
        dev_subdev_map["$dev"]="$subdev"

        menu_options+=( "$dev" "$subdev" )

    fi
done
if [ ${#menu_options[@]} -eq 0 ]; then
echo "No camera detected"
    whiptail --msgbox "No camera detected \nCheck the setup or the lanes configuration" 8 40 --title "Error" 3>&1 1>&2 2>&3
    configure_device_tree
    sleep 1
    exit 1
fi
# Use whiptail to create a menu with the collected subdevice names
selected_dev=$(whiptail --menu "Select the sensor" 25 50 16 "${menu_options[@]}" 3>&1 1>&2 2>&3)
selected_subdev=${dev_subdev_map["$selected_dev"]}
configure_subdev_controls "$selected_subdev" "$selected_dev"
